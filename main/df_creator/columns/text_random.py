#!/usr/bin/env python

"""The text random column class of the dataframe creator, create random text snippets"""

import random
import warnings

__author__ = "Peter J Usherwood"
__python_version__ = "3.6"


class TextRandom:
    """
    Produce a column of random sentences, 1 per row, generated by markov chains on a given corpus.
    """
    def __init__(self, name='Test Random Text', n_records=50, args=None):
        """
        :param name: String column root name
        :param n_records: Int number of rows per column
        :param args:
            - corpus: An uncleaned word tokenized corpus to be used as a training set for the markov chains
            - remove_brackets_and_quotes: Bool, remove brackets and quotes that can otherwise appear irregular
        """

        if args.get('corpus', None) is None:
            from nltk.corpus import brown
            self.corpus = args.pop('corpus', brown.words()[:200000])
        else:
            self.corpus = args.pop('corpus')

        self.name = name
        self.n_records = n_records
        self.remove_brackets_and_quotes = args.get('remove_brackets_and_quotes', True)

        if len(args.keys()) > 0:
            for key in args.keys():
                warnings.warn('Unused key:'+str(key))

        self.cache = {}

        if self.remove_brackets_and_quotes:
            self.corpus = [w for w in self.corpus if w not in ['"', '`', '(', ')', '``', "'", "''"]]

        self.corpus_size = len(self.corpus)
        self.database()

        self.col = self.create_array()

    def triples(self):
        """
        Generates triples from the given data string.
        1st (word1, word2, word3)
        2nd (word2, word3, word4)
        etc
        """

        if len(self.corpus) < 3:
            return

        for i in range(len(self.corpus) - 2):
            yield (self.corpus[i], self.corpus[i + 1], self.corpus[i + 2])

    def database(self):
        for w1, w2, w3 in self.triples():
            key = (w1, w2)
            if key in self.cache:
                self.cache[key].append(w3)
            else:
                self.cache[key] = [w3]

    def generate_sentence(self,
                          non_forward_space_punctuation='.?,:;',
                          clean_punctuation=True):
        """
        Generate a sentence using markov chains

        :param non_forward_space_punctuation: String, collection of punctuation marks to remove white space before
        :param clean_punctuation: Bool, whether to remove the whitespaces before selected punctuation marks

        :return: String, the sentence generated
        """

        sentence_ending_keys = [key for key in self.cache.keys() if key[0] == '.']
        seed_key = random.choice(sentence_ending_keys)
        seed_word = seed_key[1]
        next_word = random.choice(self.cache[seed_key])

        w1, w2 = seed_word, next_word
        gen_words = []
        while w2 not in ['.', '?', '!']:
            gen_words.append(w1)
            w1, w2 = w2, random.choice(self.cache[(w1, w2)])

        gen_words.append(w2)

        text = ' '.join(gen_words)

        if clean_punctuation:
            for punc in non_forward_space_punctuation:
                text = text.replace(' ' + punc, punc)

        return text

    def create_array(self,
                     non_forward_space_punctuation='.?,:;',
                     clean_punctuation=True):
        """
        Standard class method to produce the list to be used as a column

        :param non_forward_space_punctuation: String, collection of punctuation marks to remove white space before
        :param clean_punctuation: Bool, whether to remove the whitespaces before selected punctuation marks

        :return: List, the column
        """

        col = []
        for n in range(self.n_records):
            col += [self.generate_sentence(non_forward_space_punctuation=non_forward_space_punctuation,
                                           clean_punctuation=clean_punctuation)]

        return col
