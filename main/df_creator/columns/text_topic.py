#!/usr/bin/env python

"""The text topic column class of the dataframe creator, create random text snippets containing a topic key word"""

import random
import warnings

__author__ = "Peter J Usherwood"
__python_version__ = "3.6"


class TextTopic(object):
    """
    Produce a column of random sentences containing a given key word, 1 per row, generated by markov chains on a
    given corpus.
    """
    def __init__(self, name='Test Text Topic', n_records=50, args=None):
        """
        :param name: String column root name
        :param n_records: Int number of rows per column
        :param args:
            - topic_word: String, word to generate sentences around
            - corpus: An uncleaned word tokenized corpus to be used as a training set for the markov chains
            - remove_brackets_and_quotes: Bool, remove brackets and quotes that can otherwise appear irregular
        """

        if args.get('corpus', None) is None:
            from nltk.corpus import brown
            self.corpus = args.pop('corpus', brown.words()[:200000])
        else:
            self.corpus = args.pop('corpus')

        self.name = name
        self.n_records = n_records
        self.topic_word = args.pop('topic_word', 'city')
        self.remove_brackets_and_quotes = args.pop('remove_brackets_and_quotes', True)

        if len(args.keys()) > 0:
            for key in args.keys():
                warnings.warn('Unused key:'+str(key))

        self.cache_f = {}
        self.cache_b = {}

        if self.remove_brackets_and_quotes:
            self.corpus = [w for w in self.corpus if w not in ['"', '`', '(', ')', '``', "'", "''"]]
        else:
            self.corpus = self.corpus

        self.corpus_size = len(self.corpus)
        self.database()

        self.col = self.create_array()

    def triples(self):
        """
        Generates triples from the given data string.
        1st (word1, word2, word3)
        2nd (word2, word3, word4)
        etc
        """

        if len(self.corpus) < 3:
            return

        for i in range(len(self.corpus) - 2):
            yield (self.corpus[i], self.corpus[i + 1], self.corpus[i + 2])

    def database(self):

        # Forward dict
        for w1, w2, w3 in self.triples():
            key = (w1, w2)
            if key in self.cache_f:
                self.cache_f[key].append(w3)
            else:
                self.cache_f[key] = [w3]

        # Backward dict
        for w1, w2, w3 in self.triples():
            key = (w2, w3)
            if key in self.cache_b:
                self.cache_b[key].append(w1)
            else:
                self.cache_b[key] = [w1]

    def generate_topic_sentence(self,
                                non_forward_space_punctuation='.?,:;',
                                clean_punctuation=True):
        """
        Generate a sentence using markov chains, it will contain the topic word

        :param non_forward_space_punctuation: String, collection of punctuation marks to remove white space before
        :param clean_punctuation: Bool, whether to remove the whitespaces before selected punctuation marks

        :return: String, the sentence generated
        """

        # Forward
        topic_word_keys = [key for key in self.cache_f.keys() if self.topic_word == key[0]]
        seed_key = random.choice(topic_word_keys)
        seed_word, next_word = seed_key

        w1, w2 = seed_word, next_word
        forward_gen_words = []
        while w2 not in ['.', '?', '!']:
            forward_gen_words.append(w1)
            w1, w2 = w2, random.choice(self.cache_f[(w1, w2)])

        forward_gen_words.append(w2)

        # Backward
        topic_word_keys = [key for key in self.cache_b.keys() if self.topic_word == key[1]]
        seed_key = random.choice(topic_word_keys)
        previous_word, seed_word = seed_key

        w1, w2 = previous_word, seed_word
        backward_gen_words = []
        while w1 not in ['.', '?', '!']:
            backward_gen_words.append(w1)
            w1, w2 = random.choice(self.cache_b[(w1, w2)]), w1

        # Join
        backward_gen_words = list(reversed(backward_gen_words))
        text = ' '.join(backward_gen_words + forward_gen_words)

        if clean_punctuation:
            for punc in non_forward_space_punctuation:
                text = text.replace(' ' + punc, punc)

        return text

    def create_array(self,
                     non_forward_space_punctuation='.?,:;',
                     clean_punctuation=True):
        """
        Standard class method to produce the list to be used as a column

        :param non_forward_space_punctuation: String, collection of punctuation marks to remove white space before
        :param clean_punctuation: Bool, whether to remove the whitespaces before selected punctuation marks

        :return: List, the column
        """

        col = []
        for n in range(self.n_records):
            col += [self.generate_topic_sentence(non_forward_space_punctuation=non_forward_space_punctuation,
                                                 clean_punctuation=clean_punctuation)]

        return col
